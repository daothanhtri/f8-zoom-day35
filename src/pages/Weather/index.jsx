import { useState, useEffect } from "react";
import styles from "./Weather.module.scss";

const weatherConditions = [
  { name: "N·∫Øng", icon: "‚òÄÔ∏è", tempRange: [28, 38], humidityRange: [50, 70] },
  {
    name: "N·∫Øng n√≥ng",
    icon: "ü•µ",
    tempRange: [34, 42],
    humidityRange: [45, 65],
  },
  { name: "C√≥ m√¢y", icon: "‚òÅÔ∏è", tempRange: [25, 33], humidityRange: [65, 85] },
  {
    name: "M√¢y r·∫£i r√°c",
    icon: "‚õÖ",
    tempRange: [24, 32],
    humidityRange: [60, 80],
  },
  { name: "M∆∞a nh·∫π", icon: "üåßÔ∏è", tempRange: [23, 29], humidityRange: [75, 90] },
  { name: "M∆∞a r√†o", icon: "‚òî", tempRange: [22, 28], humidityRange: [80, 95] },
  {
    name: "D√¥ng b√£o",
    icon: "‚õàÔ∏è",
    tempRange: [20, 26],
    humidityRange: [85, 99],
  },
  {
    name: "S∆∞∆°ng m√π",
    icon: "üå´Ô∏è",
    tempRange: [18, 25],
    humidityRange: [88, 99],
  },
  { name: "Gi√≥ nh·∫π", icon: "üçÉ", tempRange: [26, 34], humidityRange: [60, 75] },
  { name: "Se l·∫°nh", icon: "ü•∂", tempRange: [15, 22], humidityRange: [70, 85] },
];

const cityList = {
  hanoi: "H√† N·ªôi",
  hcm: "TP.HCM",
  danang: "ƒê√† N·∫µng",
  hue: "Hu·∫ø",
  dalat: "ƒê√† L·∫°t",
  cantho: "C·∫ßn Th∆°",
  nhatrang: "Nha Trang",
  phuquoc: "Ph√∫ Qu·ªëc",
  camau: "C√† Mau",
};

function Weather() {
  const [selectedCityKey, setSelectedCityKey] = useState("hanoi");
  const [currentWeatherData, setCurrentWeatherData] = useState({});

  const getRandomNumber = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  const refreshWeather = () => {
    setCurrentWeatherData(() => {
      const newWeatherData = {};
      for (const cityKey in cityList) {
        const randomCondition =
          weatherConditions[getRandomNumber(0, weatherConditions.length - 1)];

        const newTemp = getRandomNumber(
          randomCondition.tempRange[0],
          randomCondition.tempRange[1]
        );
        const newHumidity = getRandomNumber(
          randomCondition.humidityRange[0],
          randomCondition.humidityRange[1]
        );

        newWeatherData[cityKey] = {
          city: cityList[cityKey],
          temp: newTemp,
          weather: randomCondition.name,
          humidity: newHumidity,
          icon: randomCondition.icon,
        };
      }
      return newWeatherData;
    });
  };

  useEffect(() => {
    refreshWeather();
  }, []);

  const handleCityChange = (e) => {
    setSelectedCityKey(e.target.value);
  };

  const weather = currentWeatherData[selectedCityKey];

  return (
    <div className={styles.weatherApp}>
      <h2 className={styles.weatherAppTitle}>Weather App</h2>
      <div className={styles.citySelector}>
        <label htmlFor="city-select">Ch·ªçn th√†nh ph·ªë: </label>
        <select
          id="city-select"
          value={selectedCityKey}
          onChange={handleCityChange}
        >
          {Object.keys(cityList).map((key) => (
            <option key={key} value={key}>
              {cityList[key]}
            </option>
          ))}
        </select>
      </div>

      {weather ? (
        <div className={styles.weatherInfo}>
          <h3 className={styles.weatherCityName}>{weather.city}</h3>
          <span className={styles.weatherIcon}>{weather.icon}</span>
          <p className={styles.weatherTemp}>
            <strong>Nhi·ªát ƒë·ªô:</strong> {weather.temp}¬∞C
          </p>
          <p className={styles.weatherCondition}>
            <strong>T√¨nh tr·∫°ng:</strong> {weather.weather}
          </p>
          <p className={styles.weatherHumidity}>
            <strong>ƒê·ªô ·∫©m:</strong> {weather.humidity}%
          </p>
        </div>
      ) : (
        <p className="loading-message">ƒêang t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt...</p>
      )}

      <button onClick={refreshWeather} className={styles.refreshButton}>
        L√†m m·ªõi
      </button>
    </div>
  );
}

export default Weather;
